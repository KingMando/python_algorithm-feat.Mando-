from collections import deque
# [설계3] bfs 함수 구현하기
def bfs(search_start):
    queue = deque()
    queue.append(search_start)
    
    while queue:
        now_node = queue.popleft()
        for next_node in adj_list[now_node]:
            if distance[next_node] == -1:
                distance[next_node] = distance[now_node] + 1
                queue.append(next_node)
# [설계4] 정답 출력 함수 구현하기
def print_k():
    result = False
    # 거리가 k인 도시 출력하기
    for i in range(1, n+1):
        if distance[i] == k:
            print(i)
            result = True
    return result # True, False 여부를 반환

# [설계1] 입력 받기 + 인접리스트, 방문리스트(거리 정보 이용)
n, m, k, x = map(int, input().split())
adj_list = [[] for _ in range(n+1)]
distance = [-1] * (n+1) # 방문리스트를 거리 정보로 표현
distance[x] = 0 # 시작 노드의 거리 정보를 0으로 초기화

# 인접리스트 만들기
for i in range(m):
    s, e = map(int, input().split())
    adj_list[s].append(e)

# 인접 리스트 정렬하기
for i in range(n+1):
    adj_list[i].sort()

# bfs 함수 호출
bfs(x)
# 정답 출력 함수 호출
answer = print_k()
# 만약 특정 거리의 도시가 없다면 -1 출력
if answer == False:
    print(-1)
