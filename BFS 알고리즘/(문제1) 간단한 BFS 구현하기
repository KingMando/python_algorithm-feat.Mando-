from collections import deque

# [설계3] BFS(너비우선탐색) 함수 만들기
def bfs(search_start):
    queue = deque() 
    queue.append(search_start) # 큐에 탐색 시작 노드를 추가
    visited[search_start] = 1 # 현재 탐색 시작 노드를 방문 처리
    
    while queue: # 큐에 남은 데이터가 없을 때까지 무한 반복
        now_node = queue.popleft() # 큐에 저장된 탐색 노드 꺼내기
        print(now_node, end=' ') # 현재 탐색 노드를 출력
        # 현재 탐색 노드와 연결된 노드 탐색하기
        for next_node in adj_list[now_node]: 
            if visited[next_node] != 1: # 현재 탐색 노드와 연결된 노드를 아직 방문하지 않았다면
                # 방문 처리 후, 노드를 큐에 삽입하기
                visited[next_node] = 1 
                queue.append(next_node)

# [설계1] 입력받기(1) 노드, 간선, 탐색값 입력 받기    
n, edge, search_start = map(int, input().split())
# [설계1] 입력받기(2) 인접리스트, 방문처리리스트 만들기  
adj_list = [[] for _ in range(n+1)] # graph[0][0] 사용하지 않기 위해 n+1[개] 리스트 생성(헷갈림 방지)
visited = [0]*(n+1) # visited[0] 사용하지 않기 위해 n+1[개] 리스트 생성(헷갈림 방지)

# 인접 리스트 만들기
for i in range(edge):
    s, e = map(int, input().split())
    adj_list[s].append(e) 
    adj_list[e].append(s)
    
# [설계2] 인접 리스트 정렬하기(오름차순)
for i in range(n+1):
    adj_list[i].sort() # 번호가 작은 노드부터 방문하기 위해 각 행을 오름차순 정렬
    
# BFS 함수 호출
bfs(search_start)
