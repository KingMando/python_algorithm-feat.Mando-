# [설계3] 촌수 계산(DFS로 구현)
def cacul_relation(s):  
    
    # 다음 탐색 위치 선정하기
    for i in graph[s]: 
         # 아직 방문하지 않은 경우
        if visited[i] == 0:
            visited[i] = visited[s]+1 # 방문 리스트에 촌수를 카운트하여 저장(방문처리)
            cacul_relation(i) # 탐색 수행

# [설계1] 입력 받기
n = int(input())
start, end = map(int, input().split())
m = int(input())

# [설계2] 인접 리스트 + 방문 리스트 만들기
graph = [[] for _ in range(n+1)] # 인접 리스트 선언
visited = [0] * (n+1) # 방문 리스트 만들기

# 인접 리스트 만들기
for i in range(m):
    s, e = map(int, input().split())
    graph[s].append(e)
    graph[e].append(s)

cacul_relation(start) # 촌수 계산하기(DFS로 구현)

# [설계4] 정답 출력하기
if visited[end] != 0:
    print(visited[end])
else:
    print(-1)
