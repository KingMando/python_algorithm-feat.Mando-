import sys
sys.setrecursionlimit(15000)

# [설계3] 구역의 개수 구하는 함수 설계(DFS)
def dfs(x, y, color):
    if x<0 or x >n-1 or y<0 or y >n-1: # 그래프 범위를 벗어나면 탐색 종료
        return False
    if graph[x][y] == color and visited[x][y] == 0: # 해당 위치를 방문하지 않았으면서 해당 색상이 같다면
        visited[x][y] = 1 # 방문처리
        # 상,하,좌,우 dfs 탐색하기
        dfs(x-1, y, color)
        dfs(x, y-1, color)
        dfs(x+1, y, color)
        dfs(x, y+1, color)
        return True # 구역이 발견되었으므로 True를 반환
    return False # 해당 위치가 같은 색상의 구역이 아니라면 탐색 종료

# [설계1] 그래프 입력 받기
n = int(input())

graph = []
visited = [[0]*n for _ in range(n)] # 방문 처리 리스트 만들기
cnt_3color = 0
cnt_2color = 0

for i in range(n):
        graph.append(list(input()))
        
# [설계2] 적록색약이 아닌 사람이 본 구역 구하는 함수 호출
for i in range(n):
    for j in range(n):
        result = dfs(i, j, graph[i][j]) # 해당 위치 dfs 탐색 시작
        if result == True: # 구역이 탐색되었다면 구역 개수 세기
            cnt_3color+=1 # 적록색약이 아닌 사람이 본 구역의 개수

visited = [[0]*n for _ in range(n)] # 방문 리스트 초기화

# [설계4] 적록색약 그래프 만들기(G -> R로 바꿔주기)
for i in range(n):
    for j in range(n): 
        if graph[i][j] == 'G':
            graph[i][j] = 'R'
            
# [설계5] 적록색약 사람이 인식하는 구역 개수 구하기 함수 호출
for i in range(n):
    for j in range(n):  
        result = dfs(i, j, graph[i][j]) # 해당 위치 dfs 탐색 시작
        if result == True: # 구역이 탐색되었다면 구역 개수 세기
            cnt_2color+=1 # 적록색약 사람이 인식하는 구역 개수

# [설계6] 정답 출력
print(cnt_3color, cnt_2color)
